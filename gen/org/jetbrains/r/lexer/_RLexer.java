// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: R.flex

/* It's an automatically generated code. Do not modify it. */
/* Use 'ant' command in src/org/jetbrains/r/lexer directory to regenerate the lexer */
package org.jetbrains.r.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import org.jetbrains.r.parsing.RElementTypes;
import org.jetbrains.r.parsing.RParserDefinition;

import static org.jetbrains.r.parsing.RElementTypes.*;
import static org.jetbrains.r.parsing.RParserDefinition.*;


class _RLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\11\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\3\37\1\40\1\41\2\42\1\43\2\42\1\44"+
    "\1\42\1\45\1\42\1\46\1\42\1\47\1\50\1\51"+
    "\1\52\2\42\1\53\2\42\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\37\1\65\1\66"+
    "\1\67\1\70\1\71\1\42\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\42\1\100\1\101\1\102\1\103\1\42"+
    "\1\104\1\105\2\42\1\106\1\107\1\110\1\111\6\0"+
    "\1\3\44\0\1\42\12\0\1\42\4\0\1\42\5\0"+
    "\27\42\1\0\37\42\1\0\u01ca\42\4\0\14\42\16\0"+
    "\5\42\7\0\1\42\1\0\1\42\201\0\5\42\1\0"+
    "\2\42\2\0\4\42\1\0\1\42\6\0\1\42\1\0"+
    "\3\42\1\0\1\42\1\0\24\42\1\0\123\42\1\0"+
    "\213\42\10\0\246\42\1\0\46\42\2\0\1\42\6\0"+
    "\51\42\107\0\33\42\4\0\4\42\55\0\53\42\43\0"+
    "\2\42\1\0\143\42\1\0\1\42\17\0\2\42\7\0"+
    "\2\42\12\0\3\42\2\0\1\42\20\0\1\42\1\0"+
    "\36\42\35\0\131\42\13\0\1\42\30\0\41\42\11\0"+
    "\2\42\4\0\1\42\5\0\26\42\4\0\1\42\11\0"+
    "\1\42\3\0\1\42\27\0\31\42\7\0\13\42\65\0"+
    "\25\42\1\0\10\42\106\0\66\42\3\0\1\42\22\0"+
    "\1\42\7\0\12\42\17\0\20\42\4\0\10\42\2\0"+
    "\2\42\2\0\26\42\1\0\7\42\1\0\1\42\3\0"+
    "\4\42\3\0\1\42\20\0\1\42\15\0\2\42\1\0"+
    "\3\42\16\0\2\42\12\0\1\42\10\0\6\42\4\0"+
    "\2\42\2\0\26\42\1\0\7\42\1\0\2\42\1\0"+
    "\2\42\1\0\2\42\37\0\4\42\1\0\1\42\23\0"+
    "\3\42\20\0\11\42\1\0\3\42\1\0\26\42\1\0"+
    "\7\42\1\0\2\42\1\0\5\42\3\0\1\42\22\0"+
    "\1\42\17\0\2\42\27\0\1\42\13\0\10\42\2\0"+
    "\2\42\2\0\26\42\1\0\7\42\1\0\2\42\1\0"+
    "\5\42\3\0\1\42\36\0\2\42\1\0\3\42\17\0"+
    "\1\42\21\0\1\42\1\0\6\42\3\0\3\42\1\0"+
    "\4\42\3\0\2\42\1\0\1\42\1\0\2\42\3\0"+
    "\2\42\3\0\3\42\3\0\14\42\26\0\1\42\64\0"+
    "\10\42\1\0\3\42\1\0\27\42\1\0\20\42\3\0"+
    "\1\42\32\0\3\42\5\0\2\42\36\0\1\42\4\0"+
    "\10\42\1\0\3\42\1\0\27\42\1\0\12\42\1\0"+
    "\5\42\3\0\1\42\40\0\1\42\1\0\2\42\17\0"+
    "\2\42\22\0\10\42\1\0\3\42\1\0\51\42\2\0"+
    "\1\42\20\0\1\42\5\0\3\42\10\0\3\42\30\0"+
    "\6\42\5\0\22\42\3\0\30\42\1\0\11\42\1\0"+
    "\1\42\2\0\7\42\72\0\60\42\1\0\2\42\14\0"+
    "\7\42\72\0\2\42\1\0\1\42\1\0\5\42\1\0"+
    "\30\42\1\0\1\42\1\0\12\42\1\0\2\42\11\0"+
    "\1\42\2\0\5\42\1\0\1\42\25\0\4\42\40\0"+
    "\1\42\77\0\10\42\1\0\44\42\33\0\5\42\163\0"+
    "\53\42\24\0\1\42\20\0\6\42\4\0\4\42\3\0"+
    "\1\42\3\0\2\42\7\0\3\42\4\0\15\42\14\0"+
    "\1\42\21\0\46\42\1\0\1\42\5\0\1\42\2\0"+
    "\53\42\1\0\115\42\1\0\4\42\2\0\7\42\1\0"+
    "\1\42\1\0\4\42\2\0\51\42\1\0\4\42\2\0"+
    "\41\42\1\0\4\42\2\0\7\42\1\0\1\42\1\0"+
    "\4\42\2\0\17\42\1\0\71\42\1\0\4\42\2\0"+
    "\103\42\45\0\20\42\20\0\126\42\2\0\6\42\3\0"+
    "\u016c\42\2\0\21\42\1\0\32\42\5\0\113\42\6\0"+
    "\10\42\7\0\15\42\1\0\4\42\16\0\22\42\16\0"+
    "\22\42\16\0\15\42\1\0\3\42\17\0\64\42\43\0"+
    "\1\42\4\0\1\42\103\0\131\42\7\0\5\42\2\0"+
    "\42\42\1\0\1\42\5\0\106\42\12\0\37\42\61\0"+
    "\36\42\2\0\5\42\13\0\54\42\4\0\32\42\66\0"+
    "\27\42\11\0\65\42\122\0\1\42\135\0\57\42\21\0"+
    "\7\42\67\0\36\42\15\0\2\42\12\0\54\42\32\0"+
    "\44\42\51\0\3\42\12\0\44\42\2\0\11\42\7\0"+
    "\53\42\2\0\3\42\51\0\4\42\1\0\6\42\1\0"+
    "\2\42\3\0\1\42\5\0\300\42\100\0\26\42\2\0"+
    "\6\42\2\0\46\42\2\0\6\42\2\0\10\42\1\0"+
    "\1\42\1\0\1\42\1\0\1\42\1\0\37\42\2\0"+
    "\65\42\1\0\7\42\1\0\1\42\3\0\3\42\1\0"+
    "\7\42\3\0\4\42\2\0\6\42\4\0\15\42\5\0"+
    "\3\42\1\0\7\42\53\0\2\3\107\0\1\42\15\0"+
    "\1\42\20\0\15\42\145\0\1\42\4\0\1\42\2\0"+
    "\12\42\1\0\1\42\3\0\5\42\6\0\1\42\1\0"+
    "\1\42\1\0\1\42\1\0\4\42\1\0\13\42\2\0"+
    "\4\42\5\0\5\42\4\0\1\42\64\0\2\42\u017b\0"+
    "\57\42\1\0\57\42\1\0\205\42\6\0\4\42\3\0"+
    "\2\42\14\0\46\42\1\0\1\42\5\0\1\42\2\0"+
    "\70\42\7\0\1\42\20\0\27\42\11\0\7\42\1\0"+
    "\7\42\1\0\7\42\1\0\7\42\1\0\7\42\1\0"+
    "\7\42\1\0\7\42\1\0\7\42\120\0\1\42\325\0"+
    "\2\42\52\0\5\42\5\0\2\42\4\0\126\42\6\0"+
    "\3\42\1\0\132\42\1\0\4\42\5\0\53\42\1\0"+
    "\136\42\21\0\33\42\65\0\306\42\112\0\360\42\20\0"+
    "\215\42\103\0\56\42\2\0\15\42\3\0\20\42\12\0"+
    "\2\42\24\0\57\42\20\0\37\42\2\0\106\42\61\0"+
    "\11\42\2\0\147\42\2\0\65\42\2\0\5\42\60\0"+
    "\13\42\1\0\3\42\1\0\4\42\1\0\27\42\35\0"+
    "\64\42\16\0\62\42\76\0\6\42\3\0\1\42\1\0"+
    "\2\42\13\0\34\42\12\0\27\42\31\0\35\42\7\0"+
    "\57\42\34\0\1\42\20\0\5\42\1\0\12\42\12\0"+
    "\5\42\1\0\51\42\27\0\3\42\1\0\10\42\24\0"+
    "\27\42\3\0\1\42\3\0\62\42\1\0\1\42\3\0"+
    "\2\42\2\0\5\42\2\0\1\42\1\0\1\42\30\0"+
    "\3\42\2\0\13\42\7\0\3\42\14\0\6\42\2\0"+
    "\6\42\2\0\6\42\11\0\7\42\1\0\7\42\1\0"+
    "\53\42\1\0\14\42\10\0\163\42\35\0\244\42\14\0"+
    "\27\42\4\0\61\42\4\0\u0100\3\156\42\2\0\152\42"+
    "\46\0\7\42\14\0\5\42\5\0\1\42\1\0\12\42"+
    "\1\0\15\42\1\0\5\42\1\0\1\42\1\0\2\42"+
    "\1\0\2\42\1\0\154\42\41\0\153\42\22\0\100\42"+
    "\2\0\66\42\50\0\14\42\164\0\5\42\1\0\207\42"+
    "\44\0\32\42\6\0\32\42\13\0\131\42\3\0\6\42"+
    "\2\0\6\42\2\0\6\42\2\0\3\42\43\0\14\42"+
    "\1\0\32\42\1\0\23\42\1\0\2\42\1\0\17\42"+
    "\2\0\16\42\42\0\173\42\205\0\35\42\3\0\61\42"+
    "\57\0\40\42\15\0\24\42\1\0\10\42\6\0\46\42"+
    "\12\0\36\42\2\0\44\42\4\0\10\42\60\0\236\42"+
    "\22\0\44\42\4\0\44\42\4\0\50\42\10\0\64\42"+
    "\234\0\67\42\11\0\26\42\12\0\10\42\230\0\6\42"+
    "\2\0\1\42\1\0\54\42\1\0\2\42\3\0\1\42"+
    "\2\0\27\42\12\0\27\42\11\0\37\42\101\0\23\42"+
    "\1\0\2\42\12\0\26\42\12\0\32\42\106\0\70\42"+
    "\6\0\2\42\100\0\1\42\17\0\4\42\1\0\3\42"+
    "\1\0\35\42\52\0\35\42\3\0\35\42\43\0\10\42"+
    "\1\0\34\42\33\0\66\42\12\0\26\42\12\0\23\42"+
    "\15\0\22\42\156\0\111\42\67\0\63\42\15\0\63\42"+
    "\15\0\44\42\334\0\35\42\12\0\1\42\10\0\26\42"+
    "\232\0\27\42\14\0\65\42\113\0\55\42\40\0\31\42"+
    "\32\0\44\42\35\0\1\42\13\0\43\42\3\0\1\42"+
    "\14\0\60\42\16\0\4\42\25\0\1\42\1\0\1\42"+
    "\43\0\22\42\1\0\31\42\124\0\7\42\1\0\1\42"+
    "\1\0\4\42\1\0\17\42\1\0\12\42\7\0\57\42"+
    "\46\0\10\42\2\0\2\42\2\0\26\42\1\0\7\42"+
    "\1\0\2\42\1\0\5\42\3\0\1\42\22\0\1\42"+
    "\14\0\5\42\236\0\65\42\22\0\4\42\24\0\1\42"+
    "\40\0\60\42\24\0\2\42\1\0\1\42\270\0\57\42"+
    "\51\0\4\42\44\0\60\42\24\0\1\42\73\0\53\42"+
    "\15\0\1\42\107\0\33\42\345\0\54\42\164\0\100\42"+
    "\37\0\1\42\240\0\10\42\2\0\47\42\20\0\1\42"+
    "\1\0\1\42\34\0\1\42\12\0\50\42\7\0\1\42"+
    "\25\0\1\42\13\0\56\42\23\0\1\42\42\0\71\42"+
    "\7\0\11\42\1\0\45\42\21\0\1\42\61\0\36\42"+
    "\160\0\7\42\1\0\2\42\1\0\46\42\25\0\1\42"+
    "\31\0\6\42\1\0\2\42\1\0\40\42\16\0\1\42"+
    "\u0147\0\23\42\15\0\232\42\346\0\304\42\274\0\57\42"+
    "\321\0\107\42\271\0\71\42\7\0\37\42\161\0\36\42"+
    "\22\0\60\42\20\0\4\42\37\0\25\42\5\0\23\42"+
    "\260\0\100\42\200\0\113\42\5\0\1\42\102\0\15\42"+
    "\100\0\2\42\1\0\1\42\34\0\370\42\10\0\363\42"+
    "\15\0\37\42\61\0\3\42\21\0\4\42\10\0\u018c\42"+
    "\4\0\153\42\5\0\15\42\3\0\11\42\7\0\12\42"+
    "\146\0\125\42\1\0\107\42\1\0\2\42\2\0\1\42"+
    "\2\0\2\42\2\0\4\42\1\0\14\42\1\0\1\42"+
    "\1\0\7\42\1\0\101\42\1\0\4\42\2\0\10\42"+
    "\1\0\7\42\1\0\34\42\1\0\4\42\1\0\5\42"+
    "\1\0\1\42\3\0\7\42\1\0\u0154\42\2\0\31\42"+
    "\1\0\31\42\1\0\37\42\1\0\31\42\1\0\37\42"+
    "\1\0\31\42\1\0\37\42\1\0\31\42\1\0\37\42"+
    "\1\0\31\42\1\0\10\42\64\0\55\42\12\0\7\42"+
    "\20\0\1\42\u0171\0\54\42\24\0\305\42\73\0\104\42"+
    "\7\0\1\42\264\0\4\42\1\0\33\42\1\0\2\42"+
    "\1\0\1\42\2\0\1\42\1\0\12\42\1\0\4\42"+
    "\1\0\1\42\1\0\1\42\6\0\1\42\4\0\1\42"+
    "\1\0\1\42\1\0\1\42\1\0\3\42\1\0\2\42"+
    "\1\0\1\42\2\0\1\42\1\0\1\42\1\0\1\42"+
    "\1\0\1\42\1\0\1\42\1\0\2\42\1\0\1\42"+
    "\2\0\4\42\1\0\7\42\1\0\4\42\1\0\4\42"+
    "\1\0\1\42\1\0\12\42\1\0\21\42\5\0\3\42"+
    "\1\0\5\42\1\0\21\42\104\0\327\42\51\0\65\42"+
    "\13\0\336\42\2\0\u0182\42\16\0\u0131\42\37\0\36\42"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\6\16\1\30\1\1\1\31\1\32\1\1"+
    "\7\16\1\33\1\34\1\35\1\36\2\0\1\37\1\40"+
    "\1\0\1\5\1\41\1\0\1\42\1\43\1\0\1\44"+
    "\1\20\1\0\1\45\1\0\1\46\1\47\1\50\1\51"+
    "\1\0\1\52\1\53\1\54\2\16\1\55\2\16\1\56"+
    "\1\16\1\57\1\60\1\61\2\0\5\16\1\62\1\63"+
    "\3\16\1\64\1\65\1\66\1\0\2\20\1\67\1\70"+
    "\1\16\1\71\2\16\1\72\3\16\1\73\4\16\1\0"+
    "\4\16\1\74\1\75\1\16\1\76\1\16\1\77\2\16"+
    "\1\0\1\100\4\16\1\101\2\16\1\102\5\16\1\103"+
    "\10\16\1\104\1\105\7\16\1\106\1\107\1\16\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\112\0\336\0\u0128\0\u0172\0\112"+
    "\0\u01bc\0\u0206\0\u0250\0\112\0\112\0\u029a\0\112\0\112"+
    "\0\u02e4\0\u032e\0\112\0\u0378\0\u03c2\0\u040c\0\112\0\u0456"+
    "\0\u04a0\0\u04ea\0\112\0\112\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\112\0\u07ce\0\u0818"+
    "\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\112\0\u0a1e"+
    "\0\112\0\112\0\224\0\u0a68\0\112\0\112\0\u0ab2\0\u0afc"+
    "\0\u0b46\0\u01bc\0\112\0\112\0\u0b90\0\u0bda\0\u0c24\0\u0c6e"+
    "\0\112\0\u0cb8\0\112\0\u0d02\0\112\0\112\0\u0d4c\0\112"+
    "\0\112\0\112\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\112"+
    "\0\u0f08\0\112\0\112\0\112\0\u07ce\0\u0f52\0\112\0\u0f9c"+
    "\0\u0fe6\0\u1030\0\u107a\0\u0534\0\u0534\0\u10c4\0\u110e\0\u1158"+
    "\0\112\0\112\0\112\0\u11a2\0\u11ec\0\u1236\0\112\0\112"+
    "\0\u1280\0\u0534\0\u12ca\0\u1314\0\u0534\0\u135e\0\u13a8\0\u13f2"+
    "\0\u0534\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8"+
    "\0\u1642\0\u168c\0\u0534\0\u0534\0\u16d6\0\u0534\0\u1720\0\u0534"+
    "\0\u176a\0\u17b4\0\u17fe\0\u0534\0\u1848\0\u1892\0\u18dc\0\u1926"+
    "\0\u0534\0\u1970\0\u19ba\0\u0534\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2"+
    "\0\u1b2c\0\u0534\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\u1d7c\0\u0534\0\u0534\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4"+
    "\0\u1eee\0\u1f38\0\u1f82\0\u0534\0\u0534\0\u1fcc\0\u0534";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\3\35\1\36"+
    "\1\35\1\37\1\35\1\40\1\35\1\41\1\35\1\42"+
    "\2\35\1\43\1\44\1\45\1\46\1\2\1\47\1\35"+
    "\1\50\1\35\1\51\1\52\2\35\1\53\3\35\1\54"+
    "\2\35\1\55\3\35\1\56\1\35\1\57\1\60\1\61"+
    "\1\62\113\0\1\63\6\0\1\64\133\0\1\65\57\0"+
    "\7\6\1\66\45\6\1\67\34\6\2\70\1\0\1\70"+
    "\2\0\6\70\1\71\75\70\12\72\1\73\77\72\13\0"+
    "\1\74\76\0\14\13\1\66\40\13\1\75\34\13\17\0"+
    "\1\46\125\0\1\76\101\0\1\35\1\0\2\77\7\0"+
    "\16\35\4\0\1\35\1\0\24\35\27\0\1\77\1\0"+
    "\2\25\11\0\1\100\3\0\1\101\6\0\1\102\11\0"+
    "\1\100\3\0\1\103\1\0\1\101\11\0\1\102\27\0"+
    "\1\77\1\0\2\25\11\0\1\100\3\0\1\101\20\0"+
    "\1\100\3\0\1\103\1\0\1\101\45\0\1\104\2\0"+
    "\1\105\101\0\1\106\6\0\1\107\1\110\111\0\1\111"+
    "\111\0\1\112\102\0\1\35\1\0\2\35\7\0\16\35"+
    "\4\0\1\35\1\0\24\35\27\0\1\35\1\0\2\35"+
    "\7\0\1\113\15\35\4\0\1\35\1\0\24\35\27\0"+
    "\1\35\1\0\2\35\7\0\16\35\4\0\1\35\1\0"+
    "\13\35\1\114\10\35\27\0\1\35\1\0\2\35\7\0"+
    "\1\115\13\35\1\116\1\35\4\0\1\35\1\0\1\117"+
    "\23\35\13\0\1\120\4\0\1\120\6\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\24\35\27\0"+
    "\1\35\1\0\2\35\7\0\11\35\1\121\4\35\4\0"+
    "\1\35\1\0\24\35\60\0\1\122\52\0\1\123\152\0"+
    "\1\124\33\0\55\125\1\126\3\125\1\127\30\125\23\0"+
    "\1\35\1\0\2\35\7\0\16\35\4\0\1\35\1\0"+
    "\16\35\1\130\5\35\27\0\1\35\1\0\2\35\7\0"+
    "\16\35\4\0\1\35\1\0\11\35\1\131\12\35\27\0"+
    "\1\35\1\0\2\35\7\0\16\35\4\0\1\35\1\0"+
    "\14\35\1\132\4\35\1\133\2\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\4\35\1\134"+
    "\6\35\1\135\10\35\27\0\1\35\1\0\2\35\7\0"+
    "\16\35\4\0\1\35\1\0\3\35\1\136\20\35\13\0"+
    "\1\120\4\0\1\120\6\0\1\35\1\0\2\35\7\0"+
    "\16\35\4\0\1\35\1\0\3\35\1\137\20\35\27\0"+
    "\1\35\1\0\2\35\7\0\16\35\4\0\1\35\1\0"+
    "\6\35\1\140\15\35\37\0\1\141\53\0\1\142\16\0"+
    "\1\71\75\0\112\6\2\70\1\0\1\70\2\0\104\70"+
    "\2\71\1\63\1\71\1\0\1\63\104\71\112\13\33\0"+
    "\1\143\103\0\2\77\11\0\1\100\3\0\1\101\20\0"+
    "\1\100\3\0\1\103\1\0\1\101\36\0\1\144\1\0"+
    "\1\144\2\0\2\145\110\0\2\146\7\0\4\146\20\0"+
    "\5\146\52\0\1\147\104\0\1\150\112\0\1\35\1\0"+
    "\2\35\7\0\6\35\1\151\7\35\4\0\1\35\1\0"+
    "\24\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\4\35\1\152\17\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\153\1\0\24\35\27\0"+
    "\1\35\1\0\2\35\7\0\6\35\1\154\7\35\4\0"+
    "\1\35\1\0\24\35\27\0\1\35\1\0\2\35\7\0"+
    "\7\35\1\155\6\35\4\0\1\35\1\0\24\35\27\0"+
    "\1\35\1\0\2\35\7\0\14\35\1\156\1\35\4\0"+
    "\1\35\1\0\24\35\4\0\112\125\23\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\3\35\1\157"+
    "\20\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\17\35\1\160\4\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\16\35\1\161"+
    "\5\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\13\35\1\162\10\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\23\35\1\163"+
    "\27\0\1\35\1\0\2\35\7\0\16\35\4\0\1\35"+
    "\1\0\15\35\1\164\6\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\35\1\0\7\35\1\165\14\35"+
    "\31\0\2\145\110\0\2\145\15\0\1\101\24\0\1\103"+
    "\1\0\1\101\41\0\1\166\1\0\2\146\7\0\4\146"+
    "\2\0\1\101\1\0\1\100\13\0\5\146\4\0\1\101"+
    "\3\0\1\100\35\0\1\35\1\0\2\35\7\0\12\35"+
    "\1\167\3\35\4\0\1\35\1\0\24\35\27\0\1\35"+
    "\1\0\2\35\7\0\16\35\4\0\1\35\1\0\2\35"+
    "\1\170\4\35\1\171\6\35\1\172\5\35\27\0\1\35"+
    "\1\0\2\35\7\0\6\35\1\173\7\35\4\0\1\35"+
    "\1\0\24\35\27\0\1\35\1\0\2\35\7\0\2\35"+
    "\1\174\13\35\4\0\1\35\1\0\24\35\27\0\1\35"+
    "\1\0\2\35\7\0\16\35\4\0\1\35\1\0\1\175"+
    "\23\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\3\35\1\176\20\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\2\35\1\177"+
    "\21\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\20\35\1\200\3\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\3\35\1\201"+
    "\20\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\11\35\1\202\12\35\31\0\2\203\106\0"+
    "\1\35\1\0\2\35\7\0\2\35\1\204\13\35\4\0"+
    "\1\35\1\0\24\35\27\0\1\35\1\0\2\35\7\0"+
    "\16\35\4\0\1\35\1\0\6\35\1\205\5\35\1\206"+
    "\7\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\13\35\1\207\10\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\3\35\1\210"+
    "\20\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\10\35\1\211\13\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\20\35\1\212"+
    "\3\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\1\213\23\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\35\1\0\3\35\1\214\20\35"+
    "\31\0\2\203\17\0\1\100\30\0\1\100\35\0\1\35"+
    "\1\0\2\35\7\0\16\35\4\0\1\35\1\0\1\215"+
    "\23\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\12\35\1\216\11\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\20\35\1\217"+
    "\3\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\1\220\23\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\35\1\0\7\35\1\221\14\35"+
    "\27\0\1\35\1\0\2\35\7\0\16\35\4\0\1\35"+
    "\1\0\20\35\1\222\3\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\35\1\0\16\35\1\223\5\35"+
    "\27\0\1\35\1\0\2\35\7\0\16\35\4\0\1\35"+
    "\1\0\15\35\1\224\6\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\35\1\0\3\35\1\225\20\35"+
    "\27\0\1\35\1\0\2\35\7\0\16\35\4\0\1\35"+
    "\1\0\11\35\1\226\12\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\35\1\0\14\35\1\227\7\35"+
    "\27\0\1\35\1\0\2\35\7\0\16\35\4\0\1\35"+
    "\1\0\1\230\23\35\27\0\1\35\1\0\2\35\7\0"+
    "\16\35\4\0\1\35\1\0\11\35\1\231\12\35\27\0"+
    "\1\35\1\0\2\35\7\0\16\35\4\0\1\35\1\0"+
    "\5\35\1\232\16\35\27\0\1\35\1\0\2\35\7\0"+
    "\16\35\4\0\1\233\1\0\24\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\13\35\1\234"+
    "\10\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\2\35\1\235\21\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\3\35\1\236"+
    "\20\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\3\35\1\237\20\35\27\0\1\35\1\0"+
    "\2\35\7\0\16\35\4\0\1\35\1\0\20\35\1\240"+
    "\3\35\27\0\1\35\1\0\2\35\7\0\16\35\4\0"+
    "\1\35\1\0\23\35\1\241\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\35\1\0\16\35\1\242\5\35"+
    "\27\0\1\35\1\0\2\35\7\0\16\35\4\0\1\35"+
    "\1\0\3\35\1\243\20\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\244\1\0\24\35\27\0\1\35"+
    "\1\0\2\35\7\0\16\35\4\0\1\245\1\0\24\35"+
    "\27\0\1\35\1\0\2\35\7\0\16\35\4\0\1\35"+
    "\1\0\16\35\1\246\5\35\27\0\1\35\1\0\2\35"+
    "\7\0\16\35\4\0\1\247\1\0\24\35\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8214];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\1\11\3\1\2\11"+
    "\1\1\2\11\2\1\1\11\3\1\1\11\3\1\2\11"+
    "\11\1\1\11\10\1\1\11\1\1\2\11\2\0\2\11"+
    "\1\0\2\1\1\0\2\11\1\0\2\1\1\0\1\11"+
    "\1\0\1\11\1\1\2\11\1\0\3\11\5\1\1\11"+
    "\1\1\3\11\2\0\1\11\11\1\3\11\1\0\2\1"+
    "\2\11\15\1\1\0\14\1\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private Stack<IElementType> myExpectedBracketsStack = new Stack<>();

  private boolean acceptRowString() {
    int minusPrefixLength = 0;
    char quote = zzBuffer.charAt(zzMarkedPos - 1);
    while(zzMarkedPos < zzEndRead && zzBuffer.charAt(zzMarkedPos) == '-') {
      minusPrefixLength++;
      zzMarkedPos++;
    }
    if (zzMarkedPos >= zzEndRead) {
      return false;
    }
    char closeBrace;
    switch (zzBuffer.charAt(zzMarkedPos)) {
      case '(': closeBrace = ')'; break;
      case '[': closeBrace = ']'; break;
      case '{': closeBrace = '}'; break;
      default: return false;
    }
    zzMarkedPos++;
    while (zzMarkedPos < zzEndRead) {
      char c = zzBuffer.charAt(zzMarkedPos);
      if (c == closeBrace) {
        zzMarkedPos++;
        int minusSuffixLength = 0;
        while(zzMarkedPos < zzEndRead && zzBuffer.charAt(zzMarkedPos) == '-') {
          minusSuffixLength++;
          zzMarkedPos++;
        }
        if (zzMarkedPos < zzEndRead && minusPrefixLength == minusSuffixLength && zzBuffer.charAt(zzMarkedPos) == quote) {
          zzMarkedPos++;
          return true;
        }
      }
      else {
        zzMarkedPos++;
      }
    }
    return false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 73: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 74: break;
          case 3:
            { return R_NOT;
            }
          // fall through
          case 75: break;
          case 4:
            { return R_INVALID_STRING;
            }
          // fall through
          case 76: break;
          case 5:
            { return END_OF_LINE_COMMENT;
            }
          // fall through
          case 77: break;
          case 6:
            { return R_LIST_SUBSET;
            }
          // fall through
          case 78: break;
          case 7:
            { return R_AND;
            }
          // fall through
          case 79: break;
          case 8:
            { return R_LPAR;
            }
          // fall through
          case 80: break;
          case 9:
            { return R_RPAR;
            }
          // fall through
          case 81: break;
          case 10:
            { return R_MULT;
            }
          // fall through
          case 82: break;
          case 11:
            { return R_PLUS;
            }
          // fall through
          case 83: break;
          case 12:
            { return R_COMMA;
            }
          // fall through
          case 84: break;
          case 13:
            { return R_MINUS;
            }
          // fall through
          case 85: break;
          case 14:
            { return R_IDENTIFIER;
            }
          // fall through
          case 86: break;
          case 15:
            { return R_DIV;
            }
          // fall through
          case 87: break;
          case 16:
            { return R_NUMERIC;
            }
          // fall through
          case 88: break;
          case 17:
            { return R_COLON;
            }
          // fall through
          case 89: break;
          case 18:
            { return R_SEMI;
            }
          // fall through
          case 90: break;
          case 19:
            { return R_LT;
            }
          // fall through
          case 91: break;
          case 20:
            { return R_EQ;
            }
          // fall through
          case 92: break;
          case 21:
            { return R_GT;
            }
          // fall through
          case 93: break;
          case 22:
            { return R_HELP;
            }
          // fall through
          case 94: break;
          case 23:
            { return R_AT;
            }
          // fall through
          case 95: break;
          case 24:
            { myExpectedBracketsStack.add(R_RBRACKET); return R_LBRACKET;
            }
          // fall through
          case 96: break;
          case 25:
            { if (myExpectedBracketsStack.isEmpty()) return R_RBRACKET;
                              myExpectedBracketsStack.pop();
                              return R_RBRACKET;
            }
          // fall through
          case 97: break;
          case 26:
            { return R_EXP;
            }
          // fall through
          case 98: break;
          case 27:
            { return R_LBRACE;
            }
          // fall through
          case 99: break;
          case 28:
            { return R_OR;
            }
          // fall through
          case 100: break;
          case 29:
            { return R_RBRACE;
            }
          // fall through
          case 101: break;
          case 30:
            { return R_TILDE;
            }
          // fall through
          case 102: break;
          case 31:
            { return R_NOTEQ;
            }
          // fall through
          case 103: break;
          case 32:
            { return R_STRING;
            }
          // fall through
          case 104: break;
          case 33:
            { return ROXYGEN_COMMENT;
            }
          // fall through
          case 105: break;
          case 34:
            { return R_INFIX_OP;
            }
          // fall through
          case 106: break;
          case 35:
            { return R_ANDAND;
            }
          // fall through
          case 107: break;
          case 36:
            { return R_RIGHT_ASSIGN;
            }
          // fall through
          case 108: break;
          case 37:
            { return R_INTEGER;
            }
          // fall through
          case 109: break;
          case 38:
            { return R_COMPLEX;
            }
          // fall through
          case 110: break;
          case 39:
            { return R_DOUBLECOLON;
            }
          // fall through
          case 111: break;
          case 40:
            { return R_LEFT_ASSIGN_OLD;
            }
          // fall through
          case 112: break;
          case 41:
            { return R_LEFT_ASSIGN;
            }
          // fall through
          case 113: break;
          case 42:
            { return R_LE;
            }
          // fall through
          case 114: break;
          case 43:
            { return R_EQEQ;
            }
          // fall through
          case 115: break;
          case 44:
            { return R_GE;
            }
          // fall through
          case 116: break;
          case 45:
            { return R_NA;
            }
          // fall through
          case 117: break;
          case 46:
            { if (acceptRowString()) return R_STRING;
        else return R_INVALID_STRING;
            }
          // fall through
          case 118: break;
          case 47:
            { myExpectedBracketsStack.add(R_RDBRACKET); return R_LDBRACKET;
            }
          // fall through
          case 119: break;
          case 48:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return R_SHORTHAND_FUNCTION;
            }
          // fall through
          case 120: break;
          case 49:
            { if (myExpectedBracketsStack.isEmpty()) return R_RDBRACKET;
                              final IElementType expectedBracket = myExpectedBracketsStack.pop();
                              if (expectedBracket == R_RDBRACKET) {
                                return R_RDBRACKET;
                              }
                              else {
                                yypushback(1);
                                return R_RBRACKET;
                              }
            }
          // fall through
          case 121: break;
          case 50:
            { return R_IF;
            }
          // fall through
          case 122: break;
          case 51:
            { return R_IN;
            }
          // fall through
          case 123: break;
          case 52:
            { return R_FORWARD_PIPE;
            }
          // fall through
          case 124: break;
          case 53:
            { return R_OROR;
            }
          // fall through
          case 125: break;
          case 54:
            { return R_RIGHT_COMPLEX_ASSIGN;
            }
          // fall through
          case 126: break;
          case 55:
            { return R_TRIPLECOLON;
            }
          // fall through
          case 127: break;
          case 56:
            { return R_LEFT_COMPLEX_ASSIGN;
            }
          // fall through
          case 128: break;
          case 57:
            { return R_INF;
            }
          // fall through
          case 129: break;
          case 58:
            { return R_NAN;
            }
          // fall through
          case 130: break;
          case 59:
            { return R_FOR;
            }
          // fall through
          case 131: break;
          case 60:
            { return R_NULL;
            }
          // fall through
          case 132: break;
          case 61:
            { return R_TRUE;
            }
          // fall through
          case 133: break;
          case 62:
            { return R_ELSE;
            }
          // fall through
          case 134: break;
          case 63:
            { return R_NEXT;
            }
          // fall through
          case 135: break;
          case 64:
            { return R_FALSE;
            }
          // fall through
          case 136: break;
          case 65:
            { return R_BREAK;
            }
          // fall through
          case 137: break;
          case 66:
            { return R_WHILE;
            }
          // fall through
          case 138: break;
          case 67:
            { return R_REPEAT;
            }
          // fall through
          case 139: break;
          case 68:
            { return R_NA_REAL_;
            }
          // fall through
          case 140: break;
          case 69:
            { return R_FUNCTION;
            }
          // fall through
          case 141: break;
          case 70:
            { return R_NA_COMPLEX_;
            }
          // fall through
          case 142: break;
          case 71:
            { return R_NA_INTEGER_;
            }
          // fall through
          case 143: break;
          case 72:
            { return R_NA_CHARACTER_;
            }
          // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
