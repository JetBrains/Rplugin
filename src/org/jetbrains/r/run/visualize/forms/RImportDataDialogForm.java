/*
 * Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 */

package org.jetbrains.r.run.visualize.forms;

import com.intellij.DynamicBundle;
import com.intellij.ui.scale.JBUIScale;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.JBInsets;

import javax.swing.*;
import java.awt.*;

public class RImportDataDialogForm extends JDialog {
  private JPanel contentPane;
  private JPanel optionPanel;
  private JPanel centerPanel;
  private JPanel fileInputFieldPanel;
  private JTextField nameTextField;
  private JCheckBox viewAfterImportCheckBox;
  private JPanel okCancelButtonsPanel;
  private JPanel previewContentPanel;
  private JPanel openFileLinkPanel;
  private JLabel noDataLabel;
  private JPanel importOptionPanel;
  private JPanel previewPanel;
  private JPanel previewStatusPanel;
  private JPanel previewStatusComboBoxPanel;

  @Override
  public JPanel getContentPane() {
    return contentPane;
  }

  public JPanel getOptionPanel() {
    return optionPanel;
  }

  public JPanel getCenterPanel() {
    return centerPanel;
  }

  public JPanel getFileInputFieldPanel() {
    return fileInputFieldPanel;
  }

  public JTextField getNameTextField() {
    return nameTextField;
  }

  public JCheckBox getViewAfterImportCheckBox() {
    return viewAfterImportCheckBox;
  }

  public JPanel getOkCancelButtonsPanel() {
    return okCancelButtonsPanel;
  }

  public JPanel getPreviewContentPanel() {
    return previewContentPanel;
  }

  public JPanel getOpenFileLinkPanel() {
    return openFileLinkPanel;
  }

  public JLabel getNoDataLabel() {
    return noDataLabel;
  }

  public JPanel getImportOptionPanel() {
    return importOptionPanel;
  }

  public JPanel getPreviewPanel() {
    return previewPanel;
  }

  public JPanel getPreviewStatusPanel() {
    return previewStatusPanel;
  }

  public JPanel getPreviewStatusComboBoxPanel() {
    return previewStatusComboBoxPanel;
  }

  public RImportDataDialogForm() {
    setContentPane(contentPane);
    setModal(true);
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(1, 1, new JBInsets(8, 12, 8, 12), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(2, 1, new JBInsets(0, 0, 0, 0), -1, -1));
    contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
                                                null, 0, false));
    centerPanel = new JPanel();
    centerPanel.setLayout(new BorderLayout(0, 0));
    panel1.add(centerPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null,
                                                null, 0, false));
    optionPanel = new JPanel();
    optionPanel.setLayout(new GridLayoutManager(5, 2, new JBInsets(0, 0, 0, 8), -1, -1));
    centerPanel.add(optionPanel, BorderLayout.WEST);
    final Spacer spacer1 = new Spacer();
    optionPanel.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                 GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    this.$$$loadLabelText$$$(label1, DynamicBundle.getResourceBundle(getClass().getClassLoader(), "messages/RPluginBundle").getString("import.data.dialog.form.name"));
    optionPanel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    nameTextField = new JTextField();
    optionPanel.add(nameTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                       GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                                       new Dimension(150, -1), null, 0, false));
    importOptionPanel = new JPanel();
    importOptionPanel.setLayout(new BorderLayout(0, 0));
    optionPanel.add(importOptionPanel, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                           null, null, null, 0, false));
    final JSeparator separator1 = new JSeparator();
    optionPanel.add(separator1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL,
                                                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                    null, 0, false));
    final JLabel label2 = new JLabel();
    this.$$$loadLabelText$$$(label2, DynamicBundle.getResourceBundle(getClass().getClassLoader(), "messages/RPluginBundle").getString("import.data.dialog.form.from"));
    optionPanel.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    fileInputFieldPanel = new JPanel();
    fileInputFieldPanel.setLayout(new BorderLayout(0, 0));
    optionPanel.add(fileInputFieldPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                             GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                             GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                             null, null, null, 0, false));
    previewPanel = new JPanel();
    previewPanel.setLayout(new GridLayoutManager(2, 1, new JBInsets(0, 8, 0, 0), -1, -1));
    centerPanel.add(previewPanel, BorderLayout.CENTER);
    previewContentPanel = new JPanel();
    previewContentPanel.setLayout(new GridLayoutManager(4, 1, new JBInsets(0, 0, 0, 0), -1, -1));
    previewPanel.add(previewContentPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                              null, null, null, 0, false));
    final Spacer spacer2 = new Spacer();
    previewContentPanel.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                         GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    openFileLinkPanel = new JPanel();
    openFileLinkPanel.setLayout(new BorderLayout(0, 0));
    previewContentPanel.add(openFileLinkPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL,
                                                                   GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                                                   GridConstraints.SIZEPOLICY_CAN_GROW,
                                                                   GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                                                   GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    final Spacer spacer3 = new Spacer();
    previewContentPanel.add(spacer3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                         GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    noDataLabel = new JLabel();
    this
      .$$$loadLabelText$$$(noDataLabel, DynamicBundle.getResourceBundle(getClass().getClassLoader(), "messages/RPluginBundle").getString("import.data.dialog.preview.no.data.here"));
    previewContentPanel.add(noDataLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
                                                             GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                             null, 0, false));
    previewStatusPanel = new JPanel();
    previewStatusPanel.setLayout(new GridLayoutManager(1, 4, new JBInsets(6, 8, 6, 8), -1, -1));
    previewPanel.add(previewStatusPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                             GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                             GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label3 = new JLabel();
    this.$$$loadLabelText$$$(label3, DynamicBundle.getResourceBundle(getClass().getClassLoader(), "messages/RPluginBundle").getString("import.data.dialog.form.head.show"));
    previewStatusPanel.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                       GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null,
                                                       0, false));
    final Spacer spacer4 = new Spacer();
    previewStatusPanel.add(spacer4, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                                        GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    previewStatusComboBoxPanel = new JPanel();
    previewStatusComboBoxPanel.setLayout(new BorderLayout(0, 0));
    previewStatusPanel.add(previewStatusComboBoxPanel,
                           new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                               GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                               GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
                                               null, 0, false));
    final JLabel label4 = new JLabel();
    this.$$$loadLabelText$$$(label4, DynamicBundle.getResourceBundle(getClass().getClassLoader(), "messages/RPluginBundle").getString("import.data.dialog.form.head.lines"));
    previewStatusPanel.add(label4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                       GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null,
                                                       0, false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 4, new JBInsets(8, 0, 0, 0), -1, -1));
    panel1.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
                                           false));
    final Spacer spacer5 = new Spacer();
    panel2.add(spacer5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                            GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    viewAfterImportCheckBox = new JCheckBox();
    viewAfterImportCheckBox.setSelected(true);
    this.$$$loadButtonText$$$(viewAfterImportCheckBox,
                              DynamicBundle.getResourceBundle(getClass().getClassLoader(), "messages/RPluginBundle").getString("import.data.dialog.form.view.after.import"));
    panel2.add(viewAfterImportCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    okCancelButtonsPanel = new JPanel();
    okCancelButtonsPanel.setLayout(new BorderLayout(0, 0));
    panel2.add(okCancelButtonsPanel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                         GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                         GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
                                                         null, null, 0, false));
    final Spacer spacer6 = new Spacer();
    panel2.add(spacer6,
               new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   1, null, new Dimension(JBUIScale.scale(20), -1), null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadLabelText$$$(JLabel component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setDisplayedMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() { return contentPane; }
}
